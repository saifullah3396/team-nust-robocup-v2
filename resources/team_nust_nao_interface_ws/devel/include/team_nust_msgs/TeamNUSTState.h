// Generated by gencpp from file team_nust_msgs/TeamNUSTState.msg
// DO NOT EDIT!


#ifndef TEAM_NUST_MSGS_MESSAGE_TEAMNUSTSTATE_H
#define TEAM_NUST_MSGS_MESSAGE_TEAMNUSTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Transform.h>

namespace team_nust_msgs
{
template <class ContainerAllocator>
struct TeamNUSTState_
{
  typedef TeamNUSTState_<ContainerAllocator> Type;

  TeamNUSTState_()
    : header()
    , motion_thread_period(0)
    , planning_thread_period(0)
    , gb_thread_period(0)
    , vision_thread_period(0)
    , localization_thread_period(0)
    , game_comm_thread_period(0)
    , user_comm_thread_period(0)
    , motion_time_taken(0)
    , planning_time_taken(0)
    , gb_time_taken(0)
    , vision_time_taken(0)
    , localization_time_taken(0)
    , game_comm_time_taken(0)
    , user_comm_time_taken(0)
    , heart_beat(0)
    , player_number(0)
    , team_number(0)
    , team_port(0)
    , team_color(0)
    , robocup_role(0)
    , robot_intention(0)
    , robot_pose_2d()
    , stiffness_state(0)
    , posture_state(0)
    , planning_state(0)
    , whistle_detected(false)
    , robot_fallen(false)
    , robot_in_motion(false)
    , kick_target()
    , move_target()
    , foot_on_ground(0)
    , l_foot_transform()
    , r_foot_transform()  {
    }
  TeamNUSTState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , motion_thread_period(0)
    , planning_thread_period(0)
    , gb_thread_period(0)
    , vision_thread_period(0)
    , localization_thread_period(0)
    , game_comm_thread_period(0)
    , user_comm_thread_period(0)
    , motion_time_taken(0)
    , planning_time_taken(0)
    , gb_time_taken(0)
    , vision_time_taken(0)
    , localization_time_taken(0)
    , game_comm_time_taken(0)
    , user_comm_time_taken(0)
    , heart_beat(0)
    , player_number(0)
    , team_number(0)
    , team_port(0)
    , team_color(0)
    , robocup_role(0)
    , robot_intention(0)
    , robot_pose_2d(_alloc)
    , stiffness_state(0)
    , posture_state(0)
    , planning_state(0)
    , whistle_detected(false)
    , robot_fallen(false)
    , robot_in_motion(false)
    , kick_target(_alloc)
    , move_target(_alloc)
    , foot_on_ground(0)
    , l_foot_transform(_alloc)
    , r_foot_transform(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _motion_thread_period_type;
  _motion_thread_period_type motion_thread_period;

   typedef int32_t _planning_thread_period_type;
  _planning_thread_period_type planning_thread_period;

   typedef int32_t _gb_thread_period_type;
  _gb_thread_period_type gb_thread_period;

   typedef int32_t _vision_thread_period_type;
  _vision_thread_period_type vision_thread_period;

   typedef int32_t _localization_thread_period_type;
  _localization_thread_period_type localization_thread_period;

   typedef int32_t _game_comm_thread_period_type;
  _game_comm_thread_period_type game_comm_thread_period;

   typedef int32_t _user_comm_thread_period_type;
  _user_comm_thread_period_type user_comm_thread_period;

   typedef int32_t _motion_time_taken_type;
  _motion_time_taken_type motion_time_taken;

   typedef int32_t _planning_time_taken_type;
  _planning_time_taken_type planning_time_taken;

   typedef int32_t _gb_time_taken_type;
  _gb_time_taken_type gb_time_taken;

   typedef int32_t _vision_time_taken_type;
  _vision_time_taken_type vision_time_taken;

   typedef int32_t _localization_time_taken_type;
  _localization_time_taken_type localization_time_taken;

   typedef int32_t _game_comm_time_taken_type;
  _game_comm_time_taken_type game_comm_time_taken;

   typedef int32_t _user_comm_time_taken_type;
  _user_comm_time_taken_type user_comm_time_taken;

   typedef int32_t _heart_beat_type;
  _heart_beat_type heart_beat;

   typedef int32_t _player_number_type;
  _player_number_type player_number;

   typedef int32_t _team_number_type;
  _team_number_type team_number;

   typedef int32_t _team_port_type;
  _team_port_type team_port;

   typedef int32_t _team_color_type;
  _team_color_type team_color;

   typedef int32_t _robocup_role_type;
  _robocup_role_type robocup_role;

   typedef int32_t _robot_intention_type;
  _robot_intention_type robot_intention;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _robot_pose_2d_type;
  _robot_pose_2d_type robot_pose_2d;

   typedef int32_t _stiffness_state_type;
  _stiffness_state_type stiffness_state;

   typedef int32_t _posture_state_type;
  _posture_state_type posture_state;

   typedef int32_t _planning_state_type;
  _planning_state_type planning_state;

   typedef uint8_t _whistle_detected_type;
  _whistle_detected_type whistle_detected;

   typedef uint8_t _robot_fallen_type;
  _robot_fallen_type robot_fallen;

   typedef uint8_t _robot_in_motion_type;
  _robot_in_motion_type robot_in_motion;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _kick_target_type;
  _kick_target_type kick_target;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _move_target_type;
  _move_target_type move_target;

   typedef int32_t _foot_on_ground_type;
  _foot_on_ground_type foot_on_ground;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _l_foot_transform_type;
  _l_foot_transform_type l_foot_transform;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _r_foot_transform_type;
  _r_foot_transform_type r_foot_transform;




  typedef boost::shared_ptr< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> const> ConstPtr;

}; // struct TeamNUSTState_

typedef ::team_nust_msgs::TeamNUSTState_<std::allocator<void> > TeamNUSTState;

typedef boost::shared_ptr< ::team_nust_msgs::TeamNUSTState > TeamNUSTStatePtr;
typedef boost::shared_ptr< ::team_nust_msgs::TeamNUSTState const> TeamNUSTStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace team_nust_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'team_nust_msgs': ['/home/muptii/Documents/robocup/team-nust-robocup-v2/resources/team_nust_nao_interface_ws/src/team_nust_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'humanoid_nav_msgs': ['/opt/ros/indigo/share/humanoid_nav_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d35dc1deaf4d41f4225338919035b47b";
  }

  static const char* value(const ::team_nust_msgs::TeamNUSTState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd35dc1deaf4d41f4ULL;
  static const uint64_t static_value2 = 0x225338919035b47bULL;
};

template<class ContainerAllocator>
struct DataType< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "team_nust_msgs/TeamNUSTState";
  }

  static const char* value(const ::team_nust_msgs::TeamNUSTState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 motion_thread_period\n\
int32 planning_thread_period\n\
int32 gb_thread_period\n\
int32 vision_thread_period\n\
int32 localization_thread_period\n\
int32 game_comm_thread_period\n\
int32 user_comm_thread_period\n\
int32 motion_time_taken\n\
int32 planning_time_taken\n\
int32 gb_time_taken\n\
int32 vision_time_taken\n\
int32 localization_time_taken\n\
int32 game_comm_time_taken\n\
int32 user_comm_time_taken\n\
int32 heart_beat\n\
int32 player_number\n\
int32 team_number\n\
int32 team_port\n\
int32 team_color\n\
int32 robocup_role\n\
int32 robot_intention\n\
geometry_msgs/Pose2D robot_pose_2d\n\
int32 stiffness_state\n\
int32 posture_state\n\
int32 planning_state\n\
bool whistle_detected\n\
bool robot_fallen\n\
bool robot_in_motion\n\
geometry_msgs/Point kick_target\n\
geometry_msgs/Point move_target\n\
int32 foot_on_ground\n\
geometry_msgs/Transform l_foot_transform\n\
geometry_msgs/Transform r_foot_transform\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::team_nust_msgs::TeamNUSTState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.motion_thread_period);
      stream.next(m.planning_thread_period);
      stream.next(m.gb_thread_period);
      stream.next(m.vision_thread_period);
      stream.next(m.localization_thread_period);
      stream.next(m.game_comm_thread_period);
      stream.next(m.user_comm_thread_period);
      stream.next(m.motion_time_taken);
      stream.next(m.planning_time_taken);
      stream.next(m.gb_time_taken);
      stream.next(m.vision_time_taken);
      stream.next(m.localization_time_taken);
      stream.next(m.game_comm_time_taken);
      stream.next(m.user_comm_time_taken);
      stream.next(m.heart_beat);
      stream.next(m.player_number);
      stream.next(m.team_number);
      stream.next(m.team_port);
      stream.next(m.team_color);
      stream.next(m.robocup_role);
      stream.next(m.robot_intention);
      stream.next(m.robot_pose_2d);
      stream.next(m.stiffness_state);
      stream.next(m.posture_state);
      stream.next(m.planning_state);
      stream.next(m.whistle_detected);
      stream.next(m.robot_fallen);
      stream.next(m.robot_in_motion);
      stream.next(m.kick_target);
      stream.next(m.move_target);
      stream.next(m.foot_on_ground);
      stream.next(m.l_foot_transform);
      stream.next(m.r_foot_transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TeamNUSTState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::team_nust_msgs::TeamNUSTState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::team_nust_msgs::TeamNUSTState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motion_thread_period: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_thread_period);
    s << indent << "planning_thread_period: ";
    Printer<int32_t>::stream(s, indent + "  ", v.planning_thread_period);
    s << indent << "gb_thread_period: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gb_thread_period);
    s << indent << "vision_thread_period: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vision_thread_period);
    s << indent << "localization_thread_period: ";
    Printer<int32_t>::stream(s, indent + "  ", v.localization_thread_period);
    s << indent << "game_comm_thread_period: ";
    Printer<int32_t>::stream(s, indent + "  ", v.game_comm_thread_period);
    s << indent << "user_comm_thread_period: ";
    Printer<int32_t>::stream(s, indent + "  ", v.user_comm_thread_period);
    s << indent << "motion_time_taken: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_time_taken);
    s << indent << "planning_time_taken: ";
    Printer<int32_t>::stream(s, indent + "  ", v.planning_time_taken);
    s << indent << "gb_time_taken: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gb_time_taken);
    s << indent << "vision_time_taken: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vision_time_taken);
    s << indent << "localization_time_taken: ";
    Printer<int32_t>::stream(s, indent + "  ", v.localization_time_taken);
    s << indent << "game_comm_time_taken: ";
    Printer<int32_t>::stream(s, indent + "  ", v.game_comm_time_taken);
    s << indent << "user_comm_time_taken: ";
    Printer<int32_t>::stream(s, indent + "  ", v.user_comm_time_taken);
    s << indent << "heart_beat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.heart_beat);
    s << indent << "player_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.player_number);
    s << indent << "team_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.team_number);
    s << indent << "team_port: ";
    Printer<int32_t>::stream(s, indent + "  ", v.team_port);
    s << indent << "team_color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.team_color);
    s << indent << "robocup_role: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robocup_role);
    s << indent << "robot_intention: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_intention);
    s << indent << "robot_pose_2d: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_pose_2d);
    s << indent << "stiffness_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stiffness_state);
    s << indent << "posture_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.posture_state);
    s << indent << "planning_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.planning_state);
    s << indent << "whistle_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.whistle_detected);
    s << indent << "robot_fallen: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_fallen);
    s << indent << "robot_in_motion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_in_motion);
    s << indent << "kick_target: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.kick_target);
    s << indent << "move_target: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.move_target);
    s << indent << "foot_on_ground: ";
    Printer<int32_t>::stream(s, indent + "  ", v.foot_on_ground);
    s << indent << "l_foot_transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.l_foot_transform);
    s << indent << "r_foot_transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.r_foot_transform);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEAM_NUST_MSGS_MESSAGE_TEAMNUSTSTATE_H
