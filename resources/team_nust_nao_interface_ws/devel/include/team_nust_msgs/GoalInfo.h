// Generated by gencpp from file team_nust_msgs/GoalInfo.msg
// DO NOT EDIT!


#ifndef TEAM_NUST_MSGS_MESSAGE_GOALINFO_H
#define TEAM_NUST_MSGS_MESSAGE_GOALINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Pose2D.h>

namespace team_nust_msgs
{
template <class ContainerAllocator>
struct GoalInfo_
{
  typedef GoalInfo_<ContainerAllocator> Type;

  GoalInfo_()
    : header()
    , found(false)
    , left_post()
    , right_post()
    , mid()
    , poseFromGoal()
    , goal_type(0)  {
    }
  GoalInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , found(false)
    , left_post(_alloc)
    , right_post(_alloc)
    , mid(_alloc)
    , poseFromGoal(_alloc)
    , goal_type(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _found_type;
  _found_type found;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _left_post_type;
  _left_post_type left_post;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _right_post_type;
  _right_post_type right_post;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _mid_type;
  _mid_type mid;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _poseFromGoal_type;
  _poseFromGoal_type poseFromGoal;

   typedef uint8_t _goal_type_type;
  _goal_type_type goal_type;




  typedef boost::shared_ptr< ::team_nust_msgs::GoalInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::team_nust_msgs::GoalInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GoalInfo_

typedef ::team_nust_msgs::GoalInfo_<std::allocator<void> > GoalInfo;

typedef boost::shared_ptr< ::team_nust_msgs::GoalInfo > GoalInfoPtr;
typedef boost::shared_ptr< ::team_nust_msgs::GoalInfo const> GoalInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::team_nust_msgs::GoalInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace team_nust_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'team_nust_msgs': ['/home/sensei/team-nust-robocup/resources/team_nust_nao_interface_ws/src/team_nust_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'humanoid_nav_msgs': ['/opt/ros/indigo/share/humanoid_nav_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::team_nust_msgs::GoalInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::team_nust_msgs::GoalInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::team_nust_msgs::GoalInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ca7f41f373e0f0dcd0e485cfff71366";
  }

  static const char* value(const ::team_nust_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ca7f41f373e0f0dULL;
  static const uint64_t static_value2 = 0xcd0e485cfff71366ULL;
};

template<class ContainerAllocator>
struct DataType< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "team_nust_msgs/GoalInfo";
  }

  static const char* value(const ::team_nust_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
bool found\n\
geometry_msgs/Point left_post\n\
geometry_msgs/Point right_post\n\
geometry_msgs/Point mid\n\
geometry_msgs/Pose2D poseFromGoal\n\
uint8 goal_type\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::team_nust_msgs::GoalInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.found);
      stream.next(m.left_post);
      stream.next(m.right_post);
      stream.next(m.mid);
      stream.next(m.poseFromGoal);
      stream.next(m.goal_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::team_nust_msgs::GoalInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::team_nust_msgs::GoalInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.found);
    s << indent << "left_post: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.left_post);
    s << indent << "right_post: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.right_post);
    s << indent << "mid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.mid);
    s << indent << "poseFromGoal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.poseFromGoal);
    s << indent << "goal_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEAM_NUST_MSGS_MESSAGE_GOALINFO_H
