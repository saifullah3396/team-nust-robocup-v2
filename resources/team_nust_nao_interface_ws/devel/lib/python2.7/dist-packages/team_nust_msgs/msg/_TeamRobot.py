# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from team_nust_msgs/TeamRobot.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class TeamRobot(genpy.Message):
  _md5sum = "8b91570e4f56d05a3dd7171dea9d4212"
  _type = "team_nust_msgs/TeamRobot"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool data_received
bool fallen
int32 intention
int32 suggestion_to_me
geometry_msgs/Pose2D pose_2d
geometry_msgs/Point walking_to
geometry_msgs/Point shooting_to

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['data_received','fallen','intention','suggestion_to_me','pose_2d','walking_to','shooting_to']
  _slot_types = ['bool','bool','int32','int32','geometry_msgs/Pose2D','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data_received,fallen,intention,suggestion_to_me,pose_2d,walking_to,shooting_to

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TeamRobot, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data_received is None:
        self.data_received = False
      if self.fallen is None:
        self.fallen = False
      if self.intention is None:
        self.intention = 0
      if self.suggestion_to_me is None:
        self.suggestion_to_me = 0
      if self.pose_2d is None:
        self.pose_2d = geometry_msgs.msg.Pose2D()
      if self.walking_to is None:
        self.walking_to = geometry_msgs.msg.Point()
      if self.shooting_to is None:
        self.shooting_to = geometry_msgs.msg.Point()
    else:
      self.data_received = False
      self.fallen = False
      self.intention = 0
      self.suggestion_to_me = 0
      self.pose_2d = geometry_msgs.msg.Pose2D()
      self.walking_to = geometry_msgs.msg.Point()
      self.shooting_to = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B2i9d.pack(_x.data_received, _x.fallen, _x.intention, _x.suggestion_to_me, _x.pose_2d.x, _x.pose_2d.y, _x.pose_2d.theta, _x.walking_to.x, _x.walking_to.y, _x.walking_to.z, _x.shooting_to.x, _x.shooting_to.y, _x.shooting_to.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose_2d is None:
        self.pose_2d = geometry_msgs.msg.Pose2D()
      if self.walking_to is None:
        self.walking_to = geometry_msgs.msg.Point()
      if self.shooting_to is None:
        self.shooting_to = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 82
      (_x.data_received, _x.fallen, _x.intention, _x.suggestion_to_me, _x.pose_2d.x, _x.pose_2d.y, _x.pose_2d.theta, _x.walking_to.x, _x.walking_to.y, _x.walking_to.z, _x.shooting_to.x, _x.shooting_to.y, _x.shooting_to.z,) = _struct_2B2i9d.unpack(str[start:end])
      self.data_received = bool(self.data_received)
      self.fallen = bool(self.fallen)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B2i9d.pack(_x.data_received, _x.fallen, _x.intention, _x.suggestion_to_me, _x.pose_2d.x, _x.pose_2d.y, _x.pose_2d.theta, _x.walking_to.x, _x.walking_to.y, _x.walking_to.z, _x.shooting_to.x, _x.shooting_to.y, _x.shooting_to.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose_2d is None:
        self.pose_2d = geometry_msgs.msg.Pose2D()
      if self.walking_to is None:
        self.walking_to = geometry_msgs.msg.Point()
      if self.shooting_to is None:
        self.shooting_to = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 82
      (_x.data_received, _x.fallen, _x.intention, _x.suggestion_to_me, _x.pose_2d.x, _x.pose_2d.y, _x.pose_2d.theta, _x.walking_to.x, _x.walking_to.y, _x.walking_to.z, _x.shooting_to.x, _x.shooting_to.y, _x.shooting_to.z,) = _struct_2B2i9d.unpack(str[start:end])
      self.data_received = bool(self.data_received)
      self.fallen = bool(self.fallen)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2B2i9d = struct.Struct("<2B2i9d")
