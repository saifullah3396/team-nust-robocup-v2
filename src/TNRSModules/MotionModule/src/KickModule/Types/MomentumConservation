m1 = ballMass
m2 = virtualMass

// Rotated velocities in 2d case
v1xr = v1 * cos(theta1 - phi);
v1yr = v1 * sin(theta1 - phi);
v2xr = v2 * cos(theta2 - phi);
v2yr = v2 * sin(theta2 - phi);

// Elastic
v1f = (v1 * (m1 - m2) + 2 * m2 * v2) / (m1 + m2); // elastic
v2f = (v2 * (m2 - m1) + 2 * m1 * v1) / (m1 + m2); // elastic

v1fxr = (v1 * cos(theta1 - phi) * (m1 - m2) + 2 * m2 * v2 * cos(theta2 - phi)) / (m1 + m2)
v2fxr = (v2 * cos(theta2 - phi) * (m2 - m1) + 2 * m1 * v1 * cos(theta1 - phi)) / (m1 + m2)

v1fx = v1fxr * cos(phi) + v1yr * sin(phi); // elastic rotated
v1fy = v1fxr * sin(phi) + v1yr * cos(phi); // elastic rotated
v2fx = v2fxr * cos(phi) + v2yr * sin(phi); // elastic rotated
v2fy = v2fxr * sin(phi) + v2yr * cos(phi); // elastic rotated

// Inelastic
v1f = (cR * m2 * (v2 - v1) + m1 * v1 + m2 * v2) / (m1 + m2); // inelastic  => ((cR + 1) m2 * v2 + (cR * m2 - m1) * v1) / (m1 + m2);
v2f = (cR * m1 * (v1 - v2) + m1 * v1 + m2 * v2) / (m1 + m2); // inelastic  => ((cR + 1) m1 * v1 + (cR * m1 - m2) * v2) / (m1 + m2);

v1fxr = (cR * m2 * (v2xr - v1xr) + m1 * v1xr + m2 * v2xr) / (m1 + m2)
v2fxr = (cR * m1 * (v1xr - v2xr) + m2 * v2xr + m1 * v1xr) / (m1 + m2)

===>
v1fxr = ((cR + 1)* m2 * v2xr + (-cR * m2 + m1) * v1xr) / (m1 + m2); // Simplified
v2fxr = ((cR + 1)* m1 * v1xr + (-cR * m1 + m2) * v2xr) / (m1 + m2); // Simplified 

v1fx = v1fxr * cos(phi) + v1yr * sin(phi); // inelastic rotated
v1fy = v1fxr * sin(phi) + v1yr * cos(phi); // inelastic rotated
v2fx = v2fxr * cos(phi) + v2yr * sin(phi); // inelastic rotated
v2fy = v2fxr * sin(phi) + v2yr * cos(phi); // inelastic rotated

